const TelegramBot = require('node-telegram-bot-api');
const token = '';

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, {
    polling: {
        interval: 100,
        autoStart: true
    }
});

bot.on("polling_error", err => console.log(err.data.error.message));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newuser
bot.onText(/\/newuser/, (msg) => {
    const chatId = msg.chat.id;

    const clientPrivateKey = execSync('wg genkey').toString().trim();
    const clientPublicKey = execSync(`echo ${clientPrivateKey} | wg pubkey`).toString().trim();
    const serverPublicKey = '<YOUR_SERVER_PUBLIC_KEY>'; // –£–∫–∞–∂–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    const clientAddress = '10.0.0.2/32'; // –í—ã–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π IP –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

    const clientConfig = `
  [Interface]
  PrivateKey = ${clientPrivateKey}
  Address = ${clientAddress}
  DNS = 8.8.8.8

  [Peer]
  PublicKey = ${serverPublicKey}
  Endpoint = 31.128.32.240:51820
  AllowedIPs = 0.0.0.0/0
  `;

    fs.writeFileSync(`client_${chatId}.conf`, clientConfig);

    // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    exec(`sudo wg set wg0 peer ${clientPublicKey} allowed-ips ${clientAddress}`, (error, stdout, stderr) => {
        if (error) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
            console.error(`exec error: ${error}`);
            return;
        }
        bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª...');
        bot.sendDocument(chatId, `client_${chatId}.conf`);
    });
});


bot.on('text', async msg => {
    console.log(msg);
    try {
        if (msg.text.startsWith('/start')) {
            await bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, <b>' + msg.from.first_name + '! üëã</b>\n–õ–æ–≤–∏ —Å–≤–æ–π –ª—É—á—à–∏–π VPN!\n\n\üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n\üéØ –ü—Ä–æ—Å—Ç–æ—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n\üåê –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n\üì∂ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n\–°—Ç–æ–∏–º–æ—Å—Ç—å 100‚ÇΩ/–º–µ—Å –∑–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n\n\‚¨áÔ∏è ‚¨áÔ∏è  –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!  ‚¨áÔ∏è ‚¨á', {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é ‚öôÔ∏è', callback_data: 'instruction' }],
                        [{ text: 'üéä –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN üéä', callback_data: 'byVpn' }],
                        [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'info' }, { text: '–û –Ω–∞—Å', callback_data: 'aboutus' }],
                    ]
                }
            });
        }

        else if (msg.text == '/help') {
            await bot.sendMessage(msg.chat.id, `–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏`);
        }
        else {
            await bot.sendMessage(msg.chat.id, msg.text);
        }
    }
    catch (error) {

        console.log(error);

    }

})




bot.on('callback_query', async ctx => {

    try {

        if (ctx.data == 'instruction') {

            await bot.sendMessage(ctx.message.chat.id, `–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: \nüì• —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Wire Guard (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –û–°).\nüìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ <i>(–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)</i>\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º!
            `, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üì± iOS', callback_data: 'app_ios' }, { text: 'ü§ñ Android', callback_data: 'app_android' }],
                        [{ text: 'üêß Linux', callback_data: 'app_linux' }],
                        [{ text: 'ü™ü Windows', callback_data: 'app_windows' }, { text: 'üçè macOS', callback_data: 'app_mac' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'go_back' }]
                    ]
                },

            });

        }
        if (ctx.data == 'app_ios') {
            await bot.sendMessage(ctx.message.chat.id, `app_ios`)
        }

        if (ctx.data == 'app_android') {
            await bot.sendMessage(ctx.message.chat.id, `app_android`)
        }

        if (ctx.data == 'app_linux') {
            await bot.sendMessage(ctx.message.chat.id, `app_linux`)
        }

        if (ctx.data == 'app_windows') {
            await bot.sendMessage(ctx.message.chat.id, `app_windows`)
        }

        if (ctx.data == 'app_mac') {
            await bot.sendMessage(ctx.message.chat.id, `app_mac`)
        }

        console.log(ctx);

        switch (ctx.data) {
            case "go_back":

                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                await bot.deleteMessage(ctx.message.reply_to_message.chat.id, ctx.message.reply_to_message.message_id);

        }

    }
    catch (error) {

        console.log(error);

    }


}
)
